$colors: (

  "light": (
    "area": white,
    "area-light": hsl(0, 0%, 90%),
    "font": black,
    "font-light": hsl(0, 0%, 90%),
    "font-dimmed": hsl(0, 0%, 85%)
  ),

  "dark": (
    "area": black,
    "area-light": hsl(0, 0%, 15%),
    "font": white,
    "font-light": hsl(0, 0%, 50%),
    "font-dimmed": hsl(0, 0%, 18%)
  ),

  "sepia": (
    "area": hsl(56, 40%, 84%),
    "area-light": hsl(53, 30%, 79%),
    "font": hsl(56, 40%, 10%),
    "font-light": hsl(33, 25%, 50%),
    "font-dimmed": hsl(53, 32%, 76%)
  ),

  "gb": (
    "area": hsl(67, 33%, 56%),
    "area-light": hsl(67, 27%, 51%),
    "font": hsl(197, 20%, 18%),
    "font-light": hsl(117, 13%, 28%),
    "font-dimmed": hsl(67, 24%, 51%)
  )

);

@function built-list-value($theme, $list) {
  $theme-list: map-get($colors, $theme);
  $out: null;

  @for $i from 1 through length($list) {
    $key: nth($list, $i);

    @if map-has-key($theme-list, $key) {
      $key: map-get($theme-list, $key);
    }

    $out: #{$out}#{$key};
  }

  @return $out;
}

@function get-theme-value($theme, $key) {
  @return map-get(map-get($colors, $theme), $key);
}

@mixin themebody($theme, $list, $attributes) {
  @each $attribute, $value in $list {
    @if (type-of($value) == string) {
      #{$attribute}: map-get($attributes, $value);
    } @else if(type-of($value) == list) {
      #{$attribute}: built-list-value($theme, $value);
    }
  }
}

@mixin theme($list, $root: html, $use_parent: true) {
  @each $theme, $attributes in $colors {
    @if $use_parent {
      @at-root #{$root}.#{$theme}-theme & {
        @include themebody($theme, $list, $attributes);
      }
    } @else {
      @at-root #{$root}.#{$theme}-theme {
        @include themebody($theme, $list, $attributes);
      }
    }
  }
}
